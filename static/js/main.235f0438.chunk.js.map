{"version":3,"sources":["components/Result.js","components/Reset.js","components/SizeSetting.js","components/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Result","color","this","props","className","fontSize","style","setStyle","resultSize","Component","Reset","resultReset","type","onClick","SizeSetting","changeSize","value","onChangeSize","role","ColorPicker","state","colors","backgroundColor","onReceiveColor","elmColors","map","index","key","showColor","setActiveColor","margin","App","onSetColor","params","setState","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA0BeA,G,+KAtBT,MAAO,CACLC,MAAQC,KAAKC,MAAMF,S,+BAInB,OACI,yBAAKG,UAAU,2CAEf,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,2BAAd,WAAiDF,KAAKC,MAAMF,MAA5D,sBAAsFC,KAAKC,MAAME,SAAjG,OAEF,yBAAKD,UAAU,aAAaE,MAAOJ,KAAKK,YACtC,uBAAGD,MAAO,CAACD,SAAWH,KAAKC,MAAMK,aAAjC,qF,GAfGC,cCoBNC,E,4MAnBbC,YAAc,WACZ,EAAKR,MAAMQ,aAAY,I,uDAGnB,OACI,yBAAKP,UAAU,uCACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,2BAAd,UAEF,yBAAKA,UAAU,0BACb,4BAAQQ,KAAK,SAASR,UAAU,iBAAiBS,QAASX,KAAKS,aAA/D,gB,GAZFF,aCwBLK,E,4MAvBXC,WAAa,SAACC,GACZ,EAAKb,MAAMc,aAAaD,I,uDAEhB,IAAD,OACL,OACI,yBAAKZ,UAAU,uCACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,2BAAd,iBAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YAAYc,KAAK,SAC9B,4BAAQN,KAAK,SAASR,UAAU,kBAAkBS,QAAS,WAAK,EAAKE,YAAY,KAAjF,WACA,4BAAQH,KAAK,SAASR,UAAU,kBAAkBS,QAAS,WAAK,EAAKE,WAAW,KAAhF,SAEA,0BAAMX,UAAU,oBAAhB,UAA2CF,KAAKC,MAAME,SAAtD,a,GAhBEI,aC+CXU,E,kDA9CX,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IACDiB,MAAQ,CACXC,OAAS,CAAC,MAAO,OAAQ,aAAc,WAAY,aAAc,WAAY,SAAU,OAAQ,gBAHjF,E,sDAMRpB,GACR,MAAO,CACLqB,gBAAiBrB,K,qCAGNA,GACbC,KAAKC,MAAMoB,eAAetB,K,+BAEnB,IAAD,OACFuB,EAAYtB,KAAKkB,MAAMC,OAAOI,KAAI,SAACxB,EAAOyB,GAC5C,OAAO,0BACCC,IAAKD,EACLpB,MAAO,EAAKsB,UAAU3B,GACtBG,UAAa,EAAKD,MAAMF,QAAUA,EAAQ,WAAa,YACvDY,QAAW,WAAK,EAAKgB,eAAe5B,SAG5C,OACI,yBAAKG,UAAU,uCACX,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,2BAAd,iBAEF,yBAAKA,UAAU,aAAaE,MAAO,CAACwB,OAAS,oBAC1CN,S,GA/BKf,aCILsB,E,kDACrB,WAAY5B,GAAO,IAAD,8BAChB,cAAMA,IAMR6B,WAAa,SAACC,GACZ,EAAKC,SAAS,CACZjC,MAAQgC,KATM,EAYlBhB,aAAe,SAACD,GACX,EAAKI,MAAMf,SAAWW,GAAS,IAAM,EAAKI,MAAMf,SAAWW,GAAS,IAErE,EAAKkB,SAAS,CACd7B,SAAW,EAAKe,MAAMf,SAAWW,KAhBnB,EAoBlBL,YAAc,SAACK,GACVA,GACD,EAAKkB,SAAS,CACZjC,MAAQ,MACRI,SAAW,MAtBf,EAAKe,MAAQ,CACXnB,MAAQ,MACRI,SAAW,IAJG,E,qDA4BN,IAAD,OACP,OACE,yBAAKD,UAAU,YAAYE,MAAO,CAAC6B,UAAY,SAC7C,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAaH,MAAOC,KAAKkB,MAAMnB,MAAOsB,eAAgBrB,KAAK8B,aAC3D,kBAAC,EAAD,CAAaf,aAAc,SAACD,GAAD,OAAS,EAAKC,aAAaD,IAAQX,SAAUH,KAAKkB,MAAMf,WACnF,kBAAC,EAAD,CAAOM,YAAa,SAACK,GAAS,EAAKL,YAAYK,QAGnD,kBAAC,EAAD,CAAQf,MAAOC,KAAKkB,MAAMnB,MAAOO,WAAYN,KAAKkB,MAAMf,SAAUA,SAAUH,KAAKkB,MAAMf,iB,GAxChEI,aCMb2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.235f0438.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n    setStyle(){\r\n      return {\r\n        color : this.props.color,\r\n      };\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            \r\n            <div className=\"panel panel-primary\">\r\n                <div className=\"panel-heading\">\r\n                  <h3 className=\"panel-title text-center\">Color : {this.props.color} ----- Font Size : {this.props.fontSize}px</h3>\r\n                </div>\r\n                <div className=\"panel-body\" style={this.setStyle()}>\r\n                  <b style={{fontSize : this.props.resultSize}}>React JS --- Hello Word --- Node JS --- JSX --- TypeScript --- Bootstrap 3</b>\r\n                </div>\r\n            </div>\r\n            \r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","import React, {Component} from 'react';\r\n\r\nclass Reset extends Component {\r\n  resultReset = ()=>{\r\n    this.props.resultReset(true)\r\n  }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">                \r\n                <div className=\"panel panel-danger\">\r\n                    <div className=\"panel-heading\">\r\n                      <h3 className=\"panel-title text-center\">Reset</h3>\r\n                    </div>\r\n                    <div className=\"panel-body text-center\">                      \r\n                      <button type=\"button\" className=\"btn btn-danger\" onClick={this.resultReset}>Reset</button>                                          \r\n                    </div>\r\n                </div>                \r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reset;","import React, {Component} from 'react';\r\n\r\nclass SizeSetting extends Component {\r\n    changeSize = (value)=>{\r\n      this.props.onChangeSize(value)\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">                \r\n                <div className=\"panel panel-success\">\r\n                    <div className=\"panel-heading\">\r\n                      <h3 className=\"panel-title text-center\">Size Setting</h3>\r\n                    </div>\r\n                    <div className=\"panel-body\">  \r\n                      <div className=\"btn-group\" role=\"group\" >\r\n                        <button type=\"button\" className=\"btn btn-success\" onClick={()=>{this.changeSize(-2)}}>Down - </button>\r\n                        <button type=\"button\" className=\"btn btn-success\" onClick={()=>{this.changeSize(2)}}>Up +</button>\r\n                      </div>                      \r\n                        <span className=\"label label-info\">Size : {this.props.fontSize}px</span>                                \r\n                    </div>\r\n                </div>                \r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeSetting;","import React, {Component} from 'react';\r\n\r\nclass ColorPicker extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        colors : ['Red', 'Blue', 'DarkViolet', 'DarkCyan', 'DarkOrange', 'DeepPink', 'Silver', 'Gold', 'SpringGreen'],\r\n      };\r\n    }\r\n    showColor(color){\r\n      return {\r\n        backgroundColor: color\r\n      };\r\n    }\r\n    setActiveColor(color){\r\n      this.props.onReceiveColor(color);\r\n    }\r\n    render(){\r\n      var elmColors = this.state.colors.map((color, index)=>{\r\n        return <span \r\n                key={index} \r\n                style={this.showColor(color)}\r\n                className = {this.props.color === color ? \"beActive\" : \"nonActive\"}\r\n                onClick = {()=>{this.setActiveColor(color)}}\r\n                ></span>\r\n      })\r\n        return(\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"panel panel-info\">\r\n                  <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title text-center\">Color Picker</h3>\r\n                  </div>\r\n                  <div className=\"panel-body\" style={{margin : \"7px 0px 7px 0px\"}}>\r\n                    {elmColors}\r\n                    {/* <span className=\"nonActive\" style={{\"backgroundColor\" : \"blue\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"lavender\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"cyan\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"orange\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"pink\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"gold\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"yellow\"}}></span>\r\n                    <span className=\"nonActive\" style={{\"backgroundColor\" : \"green\"}}></span> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorPicker;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Result from \"./components/Result\";\nimport Reset from \"./components/Reset\";\nimport SizeSetting from \"./components/SizeSetting\";\nimport ColorPicker from \"./components/ColorPicker\";\nexport default class App extends Component {\nconstructor(props){\n  super(props);\n  this.state = {\n    color : 'Red',\n    fontSize : 14\n  };    \n}\nonSetColor = (params)=>{\n  this.setState({\n    color : params\n  })\n}\nonChangeSize = (value)=>{\n  if(this.state.fontSize + value >= 10 && this.state.fontSize + value <= 32)\n  {\n    this.setState({\n    fontSize : this.state.fontSize + value\n    })\n  }  \n}\nresultReset = (value)=>{\n  if(value){\n    this.setState({\n      color : 'Red',\n      fontSize : 14\n    })\n  }\n}\n  render() {\n    return (\n      <div className=\"container\" style={{marginTop : \"50px\"}}>\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n            <div className=\"row\">\n              <ColorPicker color={this.state.color} onReceiveColor={this.onSetColor}></ColorPicker>\n              <SizeSetting onChangeSize={(value)=>this.onChangeSize(value)} fontSize={this.state.fontSize}></SizeSetting>\n              <Reset resultReset={(value)=>{this.resultReset(value)}}></Reset>\n            </div>\n          </div>          \n          <Result color={this.state.color} resultSize={this.state.fontSize} fontSize={this.state.fontSize}></Result>          \n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}